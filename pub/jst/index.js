var Index;

Index = {
  lineKey: 0,
  lineInterval: false,
  i: function() {
    var src;
    console.log('Index.i()');
    src = Global.srcFromStyle($('.featureds > .inner > .featured:first-child'));
    dbar.i();
    console.log(src);
    Global.preload([src], function(progress) {
      return dbar.perc(progress);
    }, function(complete) {
      dbar.d();
      _.off('.orbit');
      return _.on('.lines');
    });
    Index.handlers();
    if (Index.lineInterval !== false) {
      clearInterval(Index.lineInterval);
    }
    return Index.lineInterval = setInterval(Index.lineRotate, 4000);
  },
  handlers: function() {
    $('.lines > .line').on('click', Index.lineHandler);
    $('.featureds').on('click', Index.featuredHandler);
    return $('.projects > .thumb').on('click', Index.grid);
  },
  lineRotate: function() {
    if (Index.lineKey === ($('.featureds > .inner > .featured').length - 1)) {
      return Index.line(0);
    } else {
      return Index.line(Index.lineKey + 1);
    }
  },
  lineHandler: function() {
    var t;
    t = $(this);
    Index.line(t.data('key'));
    clearInterval(Index.lineInterval);
    Index.lineInterval = setInterval(Index.lineRotate, 5000);
    return console.log('interval reset');
  },
  featuredHandler: function() {
    var link;
    link = $(".line_" + Index.lineKey).data('link');
    return location.href = link;
  },
  line: function(key) {
    var src;
    Index.lineKey = key;
    src = Global.srcFromStyle($(".featureds > .inner > .featured:nth-child(" + (key + 1) + ")"));
    dbar.i();
    return Global.preload([src], function(progress) {
      return dbar.perc(progress);
    }, function(complete) {
      dbar.d();
      _.off('.featureds > .inner > .featured');
      _.on(".featureds > .inner > .featured:nth-child(" + (key + 1) + ")");
      _.off('.lines > .line');
      return _.on(".line_" + key);
    });
  },
  grid: function() {
    var folder, t, type;
    t = $(this);
    type = t.data('type');
    folder = t.data('folder');
    if (type === 'work') {
      location.href = '/work/#' + folder;
    }
    if (type === 'blog') {
      return location.href = '/blog/#' + folder;
    }
  }
};

//# sourceMappingURL=data:application/json;base64,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QUNFLElBQUksQ0FBQyxJQUFMLENBQVUsUUFBVjtJQURGLENBREYsRUFHRSxTQUFDLFFBQUQ7TUFDQSxJQUFJLENBQUMsQ0FBTCxDQUFBO01BQ0EsQ0FBQyxDQUFDLEdBQUYsQ0FBTSxpQ0FBTjtNQUNBLENBQUMsQ0FBQyxFQUFGLENBQUssNENBQUEsR0FBNEMsQ0FBQyxHQUFBLEdBQUksQ0FBTCxDQUE1QyxHQUFtRCxHQUF4RDtNQUNBLENBQUMsQ0FBQyxHQUFGLENBQU0sZ0JBQU47YUFDQSxDQUFDLENBQUMsRUFBRixDQUFLLFFBQUEsR0FBUyxHQUFkO0lBTEEsQ0FIRjtFQVBJLENBbkROO0VBb0VBLElBQUEsRUFBTSxTQUFBO0FBRUosUUFBQTtJQUFBLENBQUEsR0FBSSxDQUFBLENBQUUsSUFBRjtJQUNKLElBQUEsR0FBTyxDQUFDLENBQUMsSUFBRixDQUFPLE1BQVA7SUFDUCxNQUFBLEdBQVMsQ0FBQyxDQUFDLElBQUYsQ0FBTyxRQUFQO0lBQ1QsSUFBRyxJQUFBLEtBQVEsTUFBWDtNQUNFLFFBQVEsQ0FBQyxJQUFULEdBQWdCLFNBQUEsR0FBWSxPQUQ5Qjs7SUFFQSxJQUFHLElBQUEsS0FBUSxNQUFYO2FBQ0UsUUFBUSxDQUFDLElBQVQsR0FBZ0IsU0FBQSxHQUFZLE9BRDlCOztFQVBJLENBcEVOIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiSW5kZXggPVxuXG4gIGxpbmVLZXk6IDBcbiAgbGluZUludGVydmFsOiBmYWxzZVxuXG4gIGk6IC0+XG5cbiAgICBjb25zb2xlLmxvZyAnSW5kZXguaSgpJ1xuXG4gICAgc3JjID0gR2xvYmFsLnNyY0Zyb21TdHlsZSgkKCcuZmVhdHVyZWRzID4gLmlubmVyID4gLmZlYXR1cmVkOmZpcnN0LWNoaWxkJykpXG5cbiAgICBkYmFyLmkoKVxuICAgIGNvbnNvbGUubG9nIHNyY1xuICAgIEdsb2JhbC5wcmVsb2FkIFtzcmNdLFxuICAgICAgKHByb2dyZXNzKSAtPlxuICAgICAgICBkYmFyLnBlcmMgcHJvZ3Jlc3NcbiAgICAsIChjb21wbGV0ZSkgLT5cbiAgICAgIGRiYXIuZCgpXG4gICAgICBfLm9mZiAnLm9yYml0J1xuICAgICAgXy5vbiAnLmxpbmVzJ1xuXG4gICAgSW5kZXguaGFuZGxlcnMoKVxuICAgIGNsZWFySW50ZXJ2YWwgSW5kZXgubGluZUludGVydmFsIGlmIEluZGV4LmxpbmVJbnRlcnZhbCBpc250IGZhbHNlXG4gICAgSW5kZXgubGluZUludGVydmFsID0gc2V0SW50ZXJ2YWwgSW5kZXgubGluZVJvdGF0ZSwgNDAwMFxuXG4gIGhhbmRsZXJzOiAtPlxuXG4gICAgJCgnLmxpbmVzID4gLmxpbmUnKS5vbiAnY2xpY2snLCBJbmRleC5saW5lSGFuZGxlclxuICAgICQoJy5mZWF0dXJlZHMnKS5vbiAnY2xpY2snLCBJbmRleC5mZWF0dXJlZEhhbmRsZXJcblxuICAgICQoJy5wcm9qZWN0cyA+IC50aHVtYicpLm9uICdjbGljaycsIEluZGV4LmdyaWRcblxuICBsaW5lUm90YXRlOiAtPlxuICAgIGlmIEluZGV4LmxpbmVLZXkgaXMgKCQoJy5mZWF0dXJlZHMgPiAuaW5uZXIgPiAuZmVhdHVyZWQnKS5sZW5ndGgtMSlcbiAgICAgIEluZGV4LmxpbmUgMFxuICAgIGVsc2VcbiAgICAgIEluZGV4LmxpbmUgSW5kZXgubGluZUtleSsxXG5cbiAgbGluZUhhbmRsZXI6IC0+XG5cbiAgICB0ID0gJCB0aGlzXG4gICAgSW5kZXgubGluZSB0LmRhdGEgJ2tleSdcblxuICAgIGNsZWFySW50ZXJ2YWwgSW5kZXgubGluZUludGVydmFsXG4gICAgSW5kZXgubGluZUludGVydmFsID0gc2V0SW50ZXJ2YWwgSW5kZXgubGluZVJvdGF0ZSwgNTAwMFxuICAgIGNvbnNvbGUubG9nICdpbnRlcnZhbCByZXNldCdcblxuXG4gIGZlYXR1cmVkSGFuZGxlcjogLT5cblxuICAgIGxpbmsgPSAkKFwiLmxpbmVfI3tJbmRleC5saW5lS2V5fVwiKS5kYXRhICdsaW5rJ1xuICAgIGxvY2F0aW9uLmhyZWYgPSBsaW5rXG5cbiAgbGluZTogKGtleSkgLT5cblxuICAgIEluZGV4LmxpbmVLZXkgPSBrZXlcblxuICAgIHNyYyA9IEdsb2JhbC5zcmNGcm9tU3R5bGUoJChcIi5mZWF0dXJlZHMgPiAuaW5uZXIgPiAuZmVhdHVyZWQ6bnRoLWNoaWxkKCN7a2V5KzF9KVwiKSlcblxuICAgIGRiYXIuaSgpXG4gICAgR2xvYmFsLnByZWxvYWQgW3NyY10sXG4gICAgICAocHJvZ3Jlc3MpIC0+XG4gICAgICAgIGRiYXIucGVyYyBwcm9ncmVzc1xuICAgICwgKGNvbXBsZXRlKSAtPlxuICAgICAgZGJhci5kKClcbiAgICAgIF8ub2ZmICcuZmVhdHVyZWRzID4gLmlubmVyID4gLmZlYXR1cmVkJ1xuICAgICAgXy5vbiBcIi5mZWF0dXJlZHMgPiAuaW5uZXIgPiAuZmVhdHVyZWQ6bnRoLWNoaWxkKCN7a2V5KzF9KVwiXG4gICAgICBfLm9mZiAnLmxpbmVzID4gLmxpbmUnXG4gICAgICBfLm9uIFwiLmxpbmVfI3trZXl9XCJcblxuICBncmlkOiAtPlxuXG4gICAgdCA9ICQgdGhpc1xuICAgIHR5cGUgPSB0LmRhdGEgJ3R5cGUnXG4gICAgZm9sZGVyID0gdC5kYXRhICdmb2xkZXInXG4gICAgaWYgdHlwZSBpcyAnd29yaydcbiAgICAgIGxvY2F0aW9uLmhyZWYgPSAnL3dvcmsvIycgKyBmb2xkZXJcbiAgICBpZiB0eXBlIGlzICdibG9nJ1xuICAgICAgbG9jYXRpb24uaHJlZiA9ICcvYmxvZy8jJyArIGZvbGRlclxuXG5cblxuIl19
