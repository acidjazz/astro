var Index;

Index = {
  lineKey: 0,
  lineInterval: false,
  i: function() {
    var src;
    console.log('Index.i()');
    src = Global.srcFromStyle($('.featureds > .inner > .featured:first-child'));
    dbar.i();
    console.log(src);
    Global.preload([src], function(progress) {
      return dbar.perc(progress);
    }, function(complete) {
      dbar.d();
      _.off('.orbit');
      return _.on('.lines');
    });
    Index.handlers();
    if (Index.lineInterval !== false) {
      clearInterval(Index.lineInterval);
    }
    Index.lineInterval = setInterval(Index.lineRotate, 4000);
    return Index.instagram.load();
  },
  handlers: function() {
    $('.lines > .line').on('click', Index.lineHandler);
    $('.featureds').on('click', Index.featuredHandler);
    return $('.projects > .thumb').on('click', Index.grid);
  },
  instagram: {
    endpoint: 'https://api.instagram.com/v1/users/self/media/recent/',
    token: '264367793.55cd6c3.ae227ede2f5c48eaab95ca57ffc4c0f6',
    loaded: false,
    posts: 8,
    load: function() {
      Loader.load(Index.instagram.endpoint + "?access_token=" + Index.instagram.token + "&callback=Index.instagram.callback");
      return Index.instagram.loaded = true;
    },
    callback: function(json) {
      var i, index, len, post, ref;
      console.log(json);
      ref = json.data;
      for (index = i = 0, len = ref.length; i < len; index = ++i) {
        post = ref[index];
        if (index === Index.instagram.posts) {
          $('.instagram > .inner').append('<div class="clear"></div>');
        }
        if (index === Index.instagram.posts) {
          return true;
        }
        $('.instagram > .inner').append("\n<div class=\"post\">\n  <a href=\"" + post.link + "\" target=\"_new\" class=\"post\">\n    <img src=\"" + post.images.standard_resolution.url + "\" />\n  </a>\n</div>");
      }
    }
  },
  lineRotate: function() {
    if (Index.lineKey === ($('.featureds > .inner > .featured').length - 1)) {
      return Index.line(0);
    } else {
      return Index.line(Index.lineKey + 1);
    }
  },
  lineHandler: function() {
    var t;
    t = $(this);
    Index.line(t.data('key'));
    clearInterval(Index.lineInterval);
    Index.lineInterval = setInterval(Index.lineRotate, 5000);
    return console.log('interval reset');
  },
  featuredHandler: function() {
    var link;
    link = $(".line_" + Index.lineKey).data('link');
    return location.href = link;
  },
  line: function(key) {
    var src;
    Index.lineKey = key;
    src = Global.srcFromStyle($(".featureds > .inner > .featured:nth-child(" + (key + 1) + ")"));
    dbar.i();
    return Global.preload([src], function(progress) {
      return dbar.perc(progress);
    }, function(complete) {
      dbar.d();
      _.off('.featureds > .inner > .featured');
      _.on(".featureds > .inner > .featured:nth-child(" + (key + 1) + ")");
      _.off('.lines > .line');
      return _.on(".line_" + key);
    });
  },
  grid: function() {
    var folder, t, type;
    t = $(this);
    type = t.data('type');
    folder = t.data('folder');
    if (type === 'work') {
      location.href = '/work/#' + folder;
    }
    if (type === 'blog') {
      return location.href = '/blog/#' + folder;
    }
  }
};

//# sourceMappingURL=data:application/json;base64,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bUQsR0FBeEQ7TUFDQSxDQUFDLENBQUMsR0FBRixDQUFNLGdCQUFOO2FBQ0EsQ0FBQyxDQUFDLEVBQUYsQ0FBSyxRQUFBLEdBQVMsR0FBZDtJQUxBLENBSEY7RUFQSSxDQTdFTjtFQThGQSxJQUFBLEVBQU0sU0FBQTtBQUVKLFFBQUE7SUFBQSxDQUFBLEdBQUksQ0FBQSxDQUFFLElBQUY7SUFDSixJQUFBLEdBQU8sQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFQO0lBQ1AsTUFBQSxHQUFTLENBQUMsQ0FBQyxJQUFGLENBQU8sUUFBUDtJQUNULElBQUcsSUFBQSxLQUFRLE1BQVg7TUFDRSxRQUFRLENBQUMsSUFBVCxHQUFnQixTQUFBLEdBQVksT0FEOUI7O0lBRUEsSUFBRyxJQUFBLEtBQVEsTUFBWDthQUNFLFFBQVEsQ0FBQyxJQUFULEdBQWdCLFNBQUEsR0FBWSxPQUQ5Qjs7RUFQSSxDQTlGTiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkluZGV4ID1cblxuICBsaW5lS2V5OiAwXG4gIGxpbmVJbnRlcnZhbDogZmFsc2VcblxuICBpOiAtPlxuXG4gICAgY29uc29sZS5sb2cgJ0luZGV4LmkoKSdcblxuICAgIHNyYyA9IEdsb2JhbC5zcmNGcm9tU3R5bGUoJCgnLmZlYXR1cmVkcyA+IC5pbm5lciA+IC5mZWF0dXJlZDpmaXJzdC1jaGlsZCcpKVxuXG4gICAgZGJhci5pKClcbiAgICBjb25zb2xlLmxvZyBzcmNcbiAgICBHbG9iYWwucHJlbG9hZCBbc3JjXSxcbiAgICAgIChwcm9ncmVzcykgLT5cbiAgICAgICAgZGJhci5wZXJjIHByb2dyZXNzXG4gICAgLCAoY29tcGxldGUpIC0+XG4gICAgICBkYmFyLmQoKVxuICAgICAgXy5vZmYgJy5vcmJpdCdcbiAgICAgIF8ub24gJy5saW5lcydcblxuICAgIEluZGV4LmhhbmRsZXJzKClcbiAgICBjbGVhckludGVydmFsIEluZGV4LmxpbmVJbnRlcnZhbCBpZiBJbmRleC5saW5lSW50ZXJ2YWwgaXNudCBmYWxzZVxuICAgIEluZGV4LmxpbmVJbnRlcnZhbCA9IHNldEludGVydmFsIEluZGV4LmxpbmVSb3RhdGUsIDQwMDBcblxuICAgIEluZGV4Lmluc3RhZ3JhbS5sb2FkKClcblxuICBoYW5kbGVyczogLT5cblxuICAgICQoJy5saW5lcyA+IC5saW5lJykub24gJ2NsaWNrJywgSW5kZXgubGluZUhhbmRsZXJcbiAgICAkKCcuZmVhdHVyZWRzJykub24gJ2NsaWNrJywgSW5kZXguZmVhdHVyZWRIYW5kbGVyXG5cbiAgICAkKCcucHJvamVjdHMgPiAudGh1bWInKS5vbiAnY2xpY2snLCBJbmRleC5ncmlkXG5cbiAgaW5zdGFncmFtOlxuXG4gICAgZW5kcG9pbnQ6ICdodHRwczovL2FwaS5pbnN0YWdyYW0uY29tL3YxL3VzZXJzL3NlbGYvbWVkaWEvcmVjZW50LydcbiAgICB0b2tlbjogJzI2NDM2Nzc5My41NWNkNmMzLmFlMjI3ZWRlMmY1YzQ4ZWFhYjk1Y2E1N2ZmYzRjMGY2J1xuICAgIGxvYWRlZDogZmFsc2VcbiAgICBwb3N0czogOFxuICAgIGxvYWQ6IC0+XG4gICAgICBMb2FkZXIubG9hZCBcIiN7SW5kZXguaW5zdGFncmFtLmVuZHBvaW50fT9hY2Nlc3NfdG9rZW49I3tJbmRleC5pbnN0YWdyYW0udG9rZW59JmNhbGxiYWNrPUluZGV4Lmluc3RhZ3JhbS5jYWxsYmFja1wiXG4gICAgICBJbmRleC5pbnN0YWdyYW0ubG9hZGVkID0gdHJ1ZVxuXG4gICAgY2FsbGJhY2s6IChqc29uKSAtPlxuICAgICAgY29uc29sZS5sb2cganNvblxuICAgICAgZm9yIHBvc3QsIGluZGV4IGluIGpzb24uZGF0YVxuICAgICAgICAkKCcuaW5zdGFncmFtID4gLmlubmVyJykuYXBwZW5kICc8ZGl2IGNsYXNzPVwiY2xlYXJcIj48L2Rpdj4nIGlmIGluZGV4IGlzIEluZGV4Lmluc3RhZ3JhbS5wb3N0c1xuICAgICAgICByZXR1cm4gdHJ1ZSBpZiBpbmRleCBpcyBJbmRleC5pbnN0YWdyYW0ucG9zdHNcbiAgICAgICAgJCgnLmluc3RhZ3JhbSA+IC5pbm5lcicpLmFwcGVuZCBcIlwiXCJcblxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3N0XCI+XG4gICAgICAgICAgICA8YSBocmVmPVwiI3twb3N0Lmxpbmt9XCIgdGFyZ2V0PVwiX25ld1wiIGNsYXNzPVwicG9zdFwiPlxuICAgICAgICAgICAgICA8aW1nIHNyYz1cIiN7cG9zdC5pbWFnZXMuc3RhbmRhcmRfcmVzb2x1dGlvbi51cmx9XCIgLz5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgXCJcIlwiXG5cbiAgbGluZVJvdGF0ZTogLT5cbiAgICBpZiBJbmRleC5saW5lS2V5IGlzICgkKCcuZmVhdHVyZWRzID4gLmlubmVyID4gLmZlYXR1cmVkJykubGVuZ3RoLTEpXG4gICAgICBJbmRleC5saW5lIDBcbiAgICBlbHNlXG4gICAgICBJbmRleC5saW5lIEluZGV4LmxpbmVLZXkrMVxuXG4gIGxpbmVIYW5kbGVyOiAtPlxuXG4gICAgdCA9ICQgdGhpc1xuICAgIEluZGV4LmxpbmUgdC5kYXRhICdrZXknXG5cbiAgICBjbGVhckludGVydmFsIEluZGV4LmxpbmVJbnRlcnZhbFxuICAgIEluZGV4LmxpbmVJbnRlcnZhbCA9IHNldEludGVydmFsIEluZGV4LmxpbmVSb3RhdGUsIDUwMDBcbiAgICBjb25zb2xlLmxvZyAnaW50ZXJ2YWwgcmVzZXQnXG5cblxuICBmZWF0dXJlZEhhbmRsZXI6IC0+XG5cbiAgICBsaW5rID0gJChcIi5saW5lXyN7SW5kZXgubGluZUtleX1cIikuZGF0YSAnbGluaydcbiAgICBsb2NhdGlvbi5ocmVmID0gbGlua1xuXG4gIGxpbmU6IChrZXkpIC0+XG5cbiAgICBJbmRleC5saW5lS2V5ID0ga2V5XG5cbiAgICBzcmMgPSBHbG9iYWwuc3JjRnJvbVN0eWxlKCQoXCIuZmVhdHVyZWRzID4gLmlubmVyID4gLmZlYXR1cmVkOm50aC1jaGlsZCgje2tleSsxfSlcIikpXG5cbiAgICBkYmFyLmkoKVxuICAgIEdsb2JhbC5wcmVsb2FkIFtzcmNdLFxuICAgICAgKHByb2dyZXNzKSAtPlxuICAgICAgICBkYmFyLnBlcmMgcHJvZ3Jlc3NcbiAgICAsIChjb21wbGV0ZSkgLT5cbiAgICAgIGRiYXIuZCgpXG4gICAgICBfLm9mZiAnLmZlYXR1cmVkcyA+IC5pbm5lciA+IC5mZWF0dXJlZCdcbiAgICAgIF8ub24gXCIuZmVhdHVyZWRzID4gLmlubmVyID4gLmZlYXR1cmVkOm50aC1jaGlsZCgje2tleSsxfSlcIlxuICAgICAgXy5vZmYgJy5saW5lcyA+IC5saW5lJ1xuICAgICAgXy5vbiBcIi5saW5lXyN7a2V5fVwiXG5cbiAgZ3JpZDogLT5cblxuICAgIHQgPSAkIHRoaXNcbiAgICB0eXBlID0gdC5kYXRhICd0eXBlJ1xuICAgIGZvbGRlciA9IHQuZGF0YSAnZm9sZGVyJ1xuICAgIGlmIHR5cGUgaXMgJ3dvcmsnXG4gICAgICBsb2NhdGlvbi5ocmVmID0gJy93b3JrLyMnICsgZm9sZGVyXG4gICAgaWYgdHlwZSBpcyAnYmxvZydcbiAgICAgIGxvY2F0aW9uLmhyZWYgPSAnL2Jsb2cvIycgKyBmb2xkZXJcblxuXG5cbiJdfQ==
