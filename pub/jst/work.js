var Work;

Work = {
  hash: false,
  cproject: false,
  i: function() {
    var project;
    if (Object.keys(projects).indexOf(location.hash.replace('#', '')) !== -1) {
      project = location.hash.replace('#', '');
      Work.cproject = project;
      Work.load(project);
    } else {
      Work.summary();
    }
    document.body.scrollTop = document.documentElement.scrollTop = 0;
    return Work.handlers();
  },
  handlers: function() {
    $('.projects > .summary > .thumbs > .thumb, .related > .inner > .relateds > .thumb').on('click', Work.projectHandler);
    $('.project .filters > .inner > .filtermenu > .filter').on('click', Work.filterHandler);
    $('.summary .filters > .inner > .filtermenu > .filter').on('click', Work.summaryFilterHandler);
    $('.project > .description > .filters > .filter').on('click', Work.projectFilterHandler);
    return $(window).on('popstate', Work.pop);
  },
  pop: function(e) {
    var project;
    document.body.scrollTop = document.documentElement.scrollTop = 0;
    if (Object.keys(projects).indexOf(location.hash.replace('#', '')) !== -1) {
      project = location.hash.replace('#', '');
      Work.cproject = project;
      return Work.load(project);
    } else {
      Work.summary();
      _.on('.summary > .thumbs > .thumb');
      _.off('.summary > .filters > .inner > .filtermenu > .filter');
      return _.on('.summary > .filters > .inner > .filtermenu > .filter_all');
    }
  },
  projectFilterHandler: function() {
    var filter;
    filter = $(this).text();
    return Work.summary(filter);
  },
  summaryFilterHandler: function() {
    var copy, filter;
    filter = $(this).text().trim();
    copy = $(this).data('copy');
    return Work.summaryFilter(filter, copy);
  },
  summaryFilter: function(filter, copy) {
    _.off('.summary .filters > .inner > .filtermenu > .filter');
    _.on(".summary .filters > .inner > .filtermenu > .filter.filter_" + filter);
    if (copy) {
      $('.summary > .hero > .copy2').text(copy);
    }
    if (filter === 'all') {
      _.on('.summary > .thumbs > .thumb');
      return true;
    }
    _.off('.summary > .thumbs > .thumb');
    return setTimeout(function() {
      return $('.summary > .thumbs > .thumb').each(function(i, el) {
        var filters;
        filters = $(el).data('filters');
        if (filters.indexOf(filter) !== -1) {
          return _.on($(el));
        } else {
          return _.off($(el));
        }
      });
    }, 200);
  },
  filterHandler: function() {
    var t;
    t = $(this);
    return $('html, body').animate({
      scrollTop: $(".filter_mark.filter_" + (t.html())).offset().top
    }, 500);
  },
  projectHandler: function() {
    var project;
    project = $(this).data('project');
    history.pushState(null, null, "/work/#" + project);
    document.body.scrollTop = document.documentElement.scrollTop = 0;
    return Work.load(project);
  },
  summary: function(filter) {
    var srcs;
    location.hash = '';
    setTimeout(function() {
      $('.orbit').removeClass(function(index, css) {
        return (css.match(/\borbit_\S+/g) || []).join(' ');
      });
      return $('.dbar').removeClass(function(index, css) {
        return (css.match(/\bbar_\S+/g) || []).join(' ');
      });
    }, 500);
    _.off('.project');
    _.on('.orbit');
    dbar.i();
    srcs = [];
    $('.summary > .thumbs > .thumb > .inner').each(function(i, el) {
      return srcs.push(Global.srcFromStyle($(el)));
    });
    return Global.preload(srcs, function(progress) {
      return dbar.perc(progress);
    }, function(complete) {
      dbar.d();
      _.off('.orbit');
      _.on('.summary');
      if (filter) {
        return Work.summaryFilter(filter);
      }
    });
  },
  load: function(project) {
    var srcs;
    _.off('.project, .summary');
    $('.orbit').addClass("orbit_" + project);
    $('.dbar').addClass("bar_" + project);
    _.on('.orbit');
    dbar.i();
    $('.dbar').addClass("bar_" + project);
    srcs = Work.srcs(project);
    document.body.scrollTop = document.documentElement.scrollTop = 0;
    return Global.preload(srcs, function(progress) {
      return dbar.perc(progress);
    }, function(complete) {
      dbar.d();
      _.off('.orbit');
      $(".project img").attr('src', '');
      $(".project_" + project + " img").each(function(i, v) {
        return $(v).attr('src', "/img/work/" + project + "/1440/" + ($(v).data('src')));
      });
      _.on(".project_" + project);
      return setTimeout(function() {
        $('.orbit').removeClass(function(index, css) {
          return (css.match(/\borbit_\S+/g) || []).join(' ');
        });
        return $('.dbar').removeClass(function(index, css) {
          return (css.match(/\bbar_\S+/g) || []).join(' ');
        });
      }, 500);
    });
  },
  srcs: function(project) {
    var srcs;
    srcs = [Global.srcFromStyle($(".project_" + project + " > .cover"))];
    $(".project_" + project + " img").each(function(i, v) {
      return srcs.push("/img/work/" + project + "/1440/" + ($(v).data('src')));
    });
    return srcs;
  }
};

//# sourceMappingURL=data:application/json;base64,
